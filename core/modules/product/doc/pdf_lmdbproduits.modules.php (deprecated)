<?php
/* Copyright (C) 2017 	Laurent Destailleur <eldy@products.sourceforge.net>
 * Copyright (C) 2019 	David COUDRAY - Société PROSERV
 * Copyright (C) 2021 	Pierre Ardoin <mapiolca@me.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 * or see http://www.gnu.org/
 */

/**
 *	\file       htdocs/core/modules/product/doc/pdf_standard.modules.php
 *	\ingroup    societe
 *	\brief      File of class to build PDF documents for products/services
 */

require_once DOL_DOCUMENT_ROOT.'/core/modules/product/modules_product.class.php';
require_once DOL_DOCUMENT_ROOT.'/product/class/product.class.php';
require_once DOL_DOCUMENT_ROOT.'/fourn/class/fournisseur.product.class.php';
require_once DOL_DOCUMENT_ROOT.'/core/lib/company.lib.php';
require_once DOL_DOCUMENT_ROOT.'/core/lib/functions2.lib.php';
require_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';
require_once DOL_DOCUMENT_ROOT.'/core/lib/pdf.lib.php';
require_once DOL_DOCUMENT_ROOT.'/core/lib/product.lib.php' ;

/**
 *	Class to build documents using ODF templates generator
 */

class pdf_lmdbproduits extends ModelePDFProduct

{
    /**
     * @var DoliDb Database handler
     */
    public $db;

	/**
     * @var string model name
     */
    public $name;

	/**
     * @var string model description (short text)
     */
    public $description;

	/**
     * @var string document type
     */
    public $type;

	/**
     * @var array() Minimum version of PHP required by module.
	 * e.g.: PHP ≥ 5.4 = array(5, 4)
     */
	public $phpmin = array(5, 4);

	/**
     * Dolibarr version of the loaded document
     * @public string
     */

	public $version = 'dolibarr';

    /**
     * @var int page_largeur
     */
    public $page_largeur;

    /**
     * @var int page_hauteur
     */
    public $page_hauteur;

    /**
     * @var array format
     */
    public $format;

	/**
     * @var int marge_gauche
     */
	public $marge_gauche;

	/**
     * @var int marge_droite
     */
	public $marge_droite;

	/**
     * @var int marge_haute
     */
	public $marge_haute;

	/**

     * @var int marge_basse

     */

	public $marge_basse;

    /**
	 * Issuer
	 * @var Societe
	 */
	public $emetteur;

	/**
	 *	Constructor
	 *
	 *  @param		DoliDB		$db      Database handler
	 */

	public function __construct($db)

	{
		global $conf,$langs,$mysoc;
		// Load traductions files requiredby by page

		$langs->loadLangs(array("main", "companies"));

		$this->db = $db;
		$this->name = "Les Métiers du Bâtiment";
		$this->description = $langs->trans("DocumentModelStandardPDF");

		// Dimension page pour format A4

		$this->type = 'pdf';
		$formatarray=pdf_getFormat();
		$this->page_largeur = $formatarray['width'];
		$this->page_hauteur = $formatarray['height'];
		$this->format = array($this->page_largeur,$this->page_hauteur);
		$this->marge_gauche=isset($conf->global->MAIN_PDF_MARGIN_LEFT)?$conf->global->MAIN_PDF_MARGIN_LEFT:10;
		$this->marge_droite=isset($conf->global->MAIN_PDF_MARGIN_RIGHT)?$conf->global->MAIN_PDF_MARGIN_RIGHT:10;
		$this->marge_haute =isset($conf->global->MAIN_PDF_MARGIN_TOP)?$conf->global->MAIN_PDF_MARGIN_TOP:42;
		$this->marge_basse =0;

		$this->option_logo = 1;                    // Affiche logo
		$this->option_codeproduitservice = 0;      // Affiche code produit-service
		$this->option_multilang = 1;               // Dispo en plusieurs langues
		$this->option_freetext = 0;				   // Support add of a personalised text

		// Recupere emetteur
		$this->emetteur=$mysoc;

		if (! $this->emetteur->country_code) $this->emetteur->country_code=substr($langs->defaultlang,-2);    // By default if not defined

	}

    // phpcs:disable PEAR.NamingConventions.ValidFunctionName.NotCamelCaps
	/**
	 *	Function to build a document on disk using the generic odt module.
	 *
	 *	@param		Product		$object				Object source to build document
	 *	@param		Translate	$outputlangs		Lang output object
	 * 	@param		string		$srctemplatepath	Full path of source filename for generator using a template file
	 *  @param		int			$hidedetails		Do not show line details
	 *  @param		int			$hidedesc			Do not show desc
	 *  @param		int			$hideref			Do not show ref
	 *	@return		int         					1 if OK, <=0 if KO
	 */
	function write_file($object,$outputlangs,$srctemplatepath,$hidedetails=0,$hidedesc=0,$hideref=0)

	{
        // phpcs:enable
		global $user,$langs,$conf,$mysoc,$db,$hookmanager, $imgsizeh;

		if (! is_object($outputlangs)) $outputlangs=$langs;
		// For backward compatibility with FPDF, force output charset to ISO, because FPDF expect text to be encoded in ISO
		if (! empty($conf->global->MAIN_USE_FPDF)) $outputlangs->charset_output='ISO-8859-1';

		// Load traductions files requiredby by page
		$outputlangs->loadLangs(array("main", "dict", "companies", "bills", "products", "orders", "deliveries", "delegation@delegation"));

		if ($conf->produit->multidir_output[$conf->entity])
		{
		    // Definition of $dir and $file
			if ($object->specimen)
			{
				$dir = $conf->produit->dir_output;
				$file = $dir . "/SPECIMEN.pdf";
			}
			else
			{
				if ($object->type == 1) $titlekey='ServiceSheet';
	   			else $titlekey='ProductSheet';

				$objectref = dol_sanitizeFileName($object->ref);
				$dir = $conf->produit->multidir_output[$object->entity] . "/" . $objectref; 
				$file = $dir . "/" . $objectref . " - ".$langs->trans($titlekey)." ".$langs->trans('lmdb_for')." ".$conf->global->MAIN_INFO_SOCIETE_NOM.".pdf";
			}

			$productFournisseur = new ProductFournisseur($this->db);

			$supplierprices = $productFournisseur->list_product_fournisseur_price($object->id);

			$object->supplierprices = $supplierprices;

			if (! file_exists($dir))
			{
				if (dol_mkdir($dir) < 0)
				{
					$this->error=$langs->transnoentities("ErrorCanNotCreateDir",$dir);
					return -1;
				}
			}

			if (file_exists($dir))
			{
				// Add pdfgeneration hook

				if (! is_object($hookmanager))
				{
					include_once DOL_DOCUMENT_ROOT.'/core/class/hookmanager.class.php';
					$hookmanager=new HookManager($this->db);
				}
				$hookmanager->initHooks(array('pdfgeneration'));
				$parameters=array('file'=>$file,'object'=>$object,'outputlangs'=>$outputlangs);

				global $action;

				$reshook=$hookmanager->executeHooks('beforePDFCreation',$parameters,$object,$action);    // Note that $action and $object may have been modified by some hooks

				// Create pdf instance
				$pdf=pdf_getInstance($this->format);
				$default_font_size = pdf_getPDFFontSize($outputlangs);	// Must be after pdf_getInstance
				$pdf->SetAutoPageBreak(1,0);



				$heightforinfotot = 40;	// Height reserved to output the info and total part

		        $heightforfreetext= (isset($conf->global->MAIN_PDF_FREETEXT_HEIGHT)?$conf->global->MAIN_PDF_FREETEXT_HEIGHT:5);	// Height reserved to output the free text on last page

	            $heightforfooter = $this->marge_basse + 8;	// Height reserved to output the footer (value include bottom margin)

	            if ($conf->global->MAIN_GENERATE_DOCUMENTS_SHOW_FOOT_DETAILS >0) $heightforfooter+= 6;

                if (class_exists('TCPDF'))
                {
                    $pdf->setPrintHeader(false);
                    $pdf->setPrintFooter(false);
                }

                $pdf->SetFont(pdf_getPDFFont($outputlangs));

                // Set path to the background PDF File

                if (! empty($conf->global->MAIN_ADD_PDF_BACKGROUND))
                {
                    $pagecount = $pdf->setSourceFile($conf->mycompany->dir_output.'/'.$conf->global->MAIN_ADD_PDF_BACKGROUND);
                    $tplidx = $pdf->importPage(1);
                }

				$pdf->Open();

				$pagenb=0;

				$pdf->SetDrawColor(128,128,128);

				$pdf->SetTitle($outputlangs->convToOutputCharset($object->ref));

				$pdf->SetSubject($outputlangs->transnoentities("Product"));

				$pdf->SetCreator("Dolibarr ".DOL_VERSION);

				$pdf->SetAuthor($outputlangs->convToOutputCharset($user->getFullName($outputlangs)));

				if (! empty($conf->global->MAIN_DISABLE_PDF_COMPRESSION)) $pdf->SetCompression(false);



				$pdf->SetMargins($this->marge_gauche, $this->marge_haute, $this->marge_droite);   // Left, Top, Right




				// New page

				$pdf->AddPage();

				if (! empty($tplidx)) $pdf->useTemplate($tplidx);

				$pagenb++;

				// entête de page

				$this->_pagehead($pdf, $object, $outputlangs);

				$this->_pagefoot($pdf,$object,$outputlangs);

				

				// Réserve de hauteur pour le pied de page

				$heightforfooter = $this->marge_basse + 8;	// Height reserved to output the footer (value include bottom margin)

				if ($conf->global->MAIN_GENERATE_DOCUMENTS_SHOW_FOOT_DETAILS >0) $heightforfooter+= 6;

				

				$pdf->SetFont('','', $default_font_size - 1);

				$pdf->MultiCell(0, 3, '');		// Set interline to 3

				$pdf->SetTextColor(0,0,0);

				$pageposbefore=$pdf->getPage();
				$pdf->setPage($pageposbefore);
				$pdf->setTopMargin($this->marge_haute);
				$pdf->setPageOrientation('', 1, $heightforfooter+10);	// The only function to edit the bottom margin of current page to set it.

				// Contenu
				$nexY=40;

				// Affiche la photo si présente
				if (1==1)
				{	

					$this->_photo($pdf,$object,$outputlangs,$nexY);
				}
				else
				{
					$this->height_photo=0;
				}
				$nexY+=$this->height_photo;

				// Affiche Libellé si présent

				if ($object->label)
				{	
					$this->_label($pdf,$object,$outputlangs,$nexY+5);
					$nexY=$pdf->GetY();
				}

				// Affiche URL si présente

				if ($object->url)
				{
					$this->_URL($pdf,$object,$outputlangs,$nexY+10);
					$nexY=$pdf->GetY();
				}

				// Affiche description si présente

				if ($object->description)
				{	
					$this->_description($pdf,$object,$tab_top,$tab_height,$outputlangs,$nexY+10);
					$nexY=$pdf->GetY();
				}

				// Affiche Informations Supplémentaires si présentes

				if ($object->weight || $object->Length || $object->Width || $object->Height || $object->surface || $object->volume)
				{
					$this->_infosup($pdf,$object,$outputlangs,$nexY+10);
					$nexY=$pdf->GetY();
				}

				// Affiche Notes Publiques si présentes

				if ($object->note_public)
				{	
					$this->_note($pdf,$object,$outputlangs,$nexY+10);
					$nexY=$pdf->GetY();
				}

				$pageposafter=$pdf->getPage();
					if ($pageposafter > $pageposbefore)
					{
					$pdf->setPageOrientation('', 1, $heightforfooter);	// The only function to edit the bottom margin of current page to set it.
					$this->_pagehead($pdf,$object,$outputlangs);
					$this->_pagefoot($pdf,$object,$outputlangs);
					}
				
				$pdf->Close();

				$pdf->Output($file,'F');

				// Add pdfgeneration hook

				$hookmanager->initHooks(array('pdfgeneration'));

				$parameters=array('file'=>$file,'object'=>$object,'outputlangs'=>$outputlangs);

				global $action;

				$reshook=$hookmanager->executeHooks('afterPDFCreation',$parameters,$this,$action);    // Note that $action and $object may have been modified by some hooks

				if (! empty($conf->global->MAIN_UMASK))

					@chmod($file, octdec($conf->global->MAIN_UMASK));

				$this->result = array('fullpath'=>$file);

				return 1;   // Pas d'erreur
			}
			else
			{
				$this->error=$langs->trans("ErrorCanNotCreateDir",$dir);
				return 0;
			}
		}
		else
		{
			$this->error=$langs->trans("ErrorConstantNotDefined","PRODUCT_OUTPUTDIR");
			return 0;
		}
	}


	/**
	 *  Show photo
	 *
	 *  @param	TCPDF		$pdf     		Object PDF
	 *  @param  Object		$object     	Object to show
	 *  @param  Translate	$outputlangs	Object lang for output
	 *  @param	int			$nexY			Position Y to start
	 *  @return	void
	 */

	function _photo(&$pdf, $object, $outputlangs, $nexY)
	{
	    global $default_font_size, $conf, $langs, $object, $db;

		// Photo
	    $realpatharray = array();
		$objphoto = new Product($this->db);

		$objphoto->fetch($object->id);

		//var_dump($objphoto->id);
        //var_dump($objphoto->ref);exit;
		if (!empty($conf->global->PRODUCT_USE_OLD_PATH_FOR_PHOTO))
		{
			$pdir[0] = get_exdir($objphoto->id, 2, 0, 0, $objphoto, 'product').$objphoto->id."/photos/";
			$pdir[1] = get_exdir(0, 0, 0, 0, $objphoto, 'product').dol_sanitizeFileName($objphoto->ref).'/';
		} else {
			$pdir[0] = get_exdir(0, 0, 0, 0, $objphoto, 'product'); // default
			$pdir[1] = get_exdir($objphoto->id, 2, 0, 0, $objphoto, 'product').$objphoto->id."/photos/"; // alternative
		}

		

		//$pdir[0] = $conf->produit->multidir_output[$object->entity] ."/".dol_sanitizeFileName($object->ref)."/";
		var_dump($pdir);


		$arephoto = false;
		foreach ($pdir as $midir)
		{
			if (!$arephoto)
			{
				//$dir = $conf->produit->multidir_output[$object->entity].'/'.$midir;

				if ($conf->product->entity != $objphoto->entity) {
					$dir = $conf->product->multidir_output[$objphoto->entity].'/'.$midir; //Check repertories of current entities
				} else {
					$dir = $conf->product->dir_output.'/'.$midir; //Check repertory of the current product
				}

				//var_dump($dir);exit;

				$files_jpg = glob($dir."/*.jpg");
				$compteur_jpg = count($files_jpg);
				
				$files_png = glob($dir."/*.png");
				$compteur_png = count($files_png);
				
				$files_gif = glob($dir."/*.gif");
				$compteur_gif = count($files_gif);

				$files_jpeg = glob($dir."/*.jpeg");
				$compteur_jpeg = count($files_jpeg);

				$files = $compteur_gif + $compteur_png + $compteur_jpg + $compteur_jpeg;
		//var_dump($files); exit;
				//$i = 0;

				for ($i=0; $i < '3'; $i++) {

					foreach($objphoto->liste_photos($dir,$i) as $key => $obj)
						{
							$filename = $obj['photo'];
							$realpath = $dir.$filename;
							$arephoto = true;

							//var_dump($filename);exit;
						}
					if ($realpath && $arephoto) $realpatharray[$i] = $realpath;

					

					if ($filename)
					{
						$imglimitsizew = 50;
						if (! empty ($conf->global->MAIN_GENERATE_SHEET_PRODUCT_HEIGHT_MAX_PICTURE))
						{
							$imglimitsizeh = $conf->global->MAIN_GENERATE_SHEET_PRODUCT_HEIGHT_MAX_PICTURE;
						}
						else
						{
							$imglimitsizeh = 70;
						}

						$imgrealsize=getimagesize($realpath);

						$imgsizew=$imgrealsize[0]/10;

						$imgsizeh=$imgrealsize[1]/10;

						if ($imgsizew>$imglimitsizew) $imgsizew=$imglimitsizew ;

						if ($imgsizeh>$imglimitsizeh) $imgsizeh=$imglimitsizeh ;

						// We start with Photo of product

						if ($i == 1 && $files >= 1) {

							$positionX = $this->marge_gauche ;
							$pdf->Image($realpath, $positionX, $nexY, $imgsizew, 0, '', '', 'M', false, '', 'C') ;

						}elseif ($i == 2 && $files >= 2) {

							$positionX = $this->marge_gauche ;
							$pdf->Image($realpath, $positionX, $nexY, $imgsizew, 0, '', '', 'M', false, '', 'L') ;

						}elseif ($i == 3 && $files >= 3) {

							$positionX = $this->marge_gauche ;
							$pdf->Image($realpath, $positionX, $nexY, $imgsizew, 0, '', '', 'M', false, '', 'R') ;
						}
						// $pdf->Image does not increase value return by getY, so we save it manually

						$this->height_photo=$imgsizeh+5;

					}
				}
			}
		}


	}

	/**
	 *  Show label
	 *
	 *  @param	TCPDF		$pdf     		Object PDF
	 *  @param  Object		$object     	Object to show
	 *  @param  Translate	$outputlangs	Object lang for output
	 *  @param	int			$nexY			Position Y to start
	 *  @return	void
	 */

	function _label(&$pdf, $object, $outputlangs, $nexY)
	{
	    global $default_font_size, $langs;
	    $default_font_size = pdf_getPDFFontSize($outputlangs);

		// Affiche le libellé
		if ($object->label)
		{

			$pdf->SetFont('','B', $default_font_size+7);

			$pdf->writeHTMLCell($this->page_largeur-$this->marge_gauche-$this->marge_droite, 4, $this->marge_gauche, $nexY, dol_htmlentitiesbr($object->label), $border=0, $ln=1, $fill=0, $reseth=true, $align='C', $autopadding=false);

			$pdf->SetFont('', '', $default_font_size);

		}
	}

	/**
	 *  Show URL
	 *
	 *  @param	TCPDF		$pdf     		Object PDF
	 *  @param  Object		$object     	Object to show
	 *  @param  Translate	$outputlangs	Object lang for output
	 *  @param	int			$nexY			Position Y to start
	 *  @return	void
	 */

	function _URL(&$pdf, $object, $outputlangs, $nexY)

	{
	    global $default_font_size, $langs;

		// Affiche le lien URL si défini

		if ($object->url) 
		{
			$nexY = $pdf->GetY();
			$pdf->SetXY($this->marge_gauche+10,$nexY+1);
			$pdf->SetFont('', 'I', $default_font_size);
			$url0 = htmlentities($object->url);
			$url = dol_htmlentities($url0);
			$pdf->writeHTMLCell($this->page_largeur-$this->marge_gauche-$this->marge_droite, 4, $this->marge_gauche, $nexY, $outputlangs->transnoentities("Lien vers la page constructeur")." : ".$url, '', 'R');
			$pdf->SetFont('', '', $default_font_size);
		}
	}

	/**
	 *  Show description
	 *
	 *  @param	TCPDF		$pdf     		Object PDF
	 *  @param  Object		$object     	Object to show
	 *  @param  Translate	$outputlangs	Object lang for output
	 *  @param	int			$nexY			Position Y to start
	 *  @return	void
	 */

	function _description(&$pdf, $object, $tab_top, $tab_height, $outputlangs, $nexY)

	{
		global $conf;
	    global $default_font_size, $langs;

		// Affiche la Description

		if ($object->description)
		{	
			$pdf->SetFont('', 'B', $default_font_size+2);
			$pdf->SetFillColor(225, 225, 225);
			$pdf->SetXY($this->marge_gauche,$nexY+1);
			$pdf->RoundedRect($this->marge_gauche,$nexY, $this->page_largeur-$this->marge_droite-$this->marge_gauche, 7, 2, '1234', 'DF');
			$pdf->MultiCell($this->page_largeur-$this->marge_droite-$this->marge_gauche, 5, $outputlangs->transnoentities("Description"), 0, 'C', false);
			$nexY = $pdf->GetY()+5; // espace de 5mm
			
			$pdf->SetFont('','', $default_font_size - 2);
			$pdf->writeHTMLCell($this->page_largeur-$this->marge_gauche-10-$this->marge_droite-10, 4, $this->marge_gauche+10, $nexY,dol_htmlentitiesbr($object->description), $border=0, $ln=1, $fill=0, $reseth=true, $align='L', $autopadding=false);
		}
	}

	/**
	 *  Show informations supplémentaires
	 *
	 *  @param	TCPDF		$pdf     		Object PDF
	 *  @param  Object		$object     	Object to show
	 *  @param  Translate	$outputlangs	Object lang for output
	 *  @param	int			$nexY			Position Y to start
	 *  @return	void
	 */
	function _infosup(&$pdf, $object, $outputlangs, $nexY)
	{
	    global $default_font_size, $langs;

		// Affichage des informations supplémentaires :
		if ($object->weight || $object->Length || $object->Width || $object->Height || $object->surface || $object->volume)
		{
			$pdf->SetFont('', 'B', $default_font_size);
			$pdf->SetFillColor(225, 225, 225);
			$pdf->SetXY($this->marge_gauche,$nexY+1);
			$pdf->RoundedRect($this->marge_gauche,$nexY, $this->page_largeur-$this->marge_droite-$this->marge_gauche, 6, 2, '1234', 'DF');
			$pdf->MultiCell($this->page_largeur-$this->marge_droite-$this->marge_gauche, 5, $outputlangs->transnoentities("Additional information"), 0, 'C', false);
			$pdf->SetFont('', '', $default_font_size);
			$nexY = $pdf->GetY()+5;  // espace de 5mm
		
			// Affiche le poids si défini
			if ($object->weight)
			{
				$pdf->writeHTMLCell(70, 4, $this->marge_gauche+10, $nexY,
				$outputlangs->transnoentities("Weight").' : ', $border=1, $ln=1, $fill=0, $reseth=true, $align='L', $autopadding=false);
				$pdf->writeHTMLCell($this->page_largeur-$this->marge_droite-10-$this->marge_gauche-10-70, 4, $this->marge_gauche+10+70, $nexY, dol_htmlentitiesbr($object->weight) .' ' .measuring_units_string($object->weight_units, $measuring_style='weight'), $border=1, $ln=1, $fill=0, $reseth=true, $align='L', $autopadding=false);
				$nexY = $pdf->GetY();
			}

			// Affiche les dimentions si défini
			if ($object->length || $object->Width || $object->Height)
			{						
				$pdf->writeHTMLCell(70, 4, $this->marge_gauche+10, $nexY,
				$outputlangs->transnoentities("Length").' * '.$outputlangs->transnoentities("Width").' * '.$outputlangs->transnoentities("Height").' : ', $border=1, $ln=1, $fill=0, $reseth=true, $align='L', $autopadding=false);

				$pdf->writeHTMLCell($this->page_largeur-$this->marge_droite-10-$this->marge_gauche-10-70, 4, $this->marge_gauche+10+70, $nexY, ($object->length != ''?$object->length:'?') .' ' .measuring_units_string($object->length_units, $measuring_style='size').' * '.($object->width != ''?$object->width:'?') .' ' .measuring_units_string($object->width_units, $measuring_style='size').' * '.($object->height != ''?$object->height:'?') .' ' .measuring_units_string($object->height_units, $measuring_style='size'), $border=1, $ln=1, $fill=0, $reseth=true, $align='L', $autopadding=false);
				$nexY = $pdf->GetY();
			}

			// Affiche la surface si défini
			if ($object->surface)
			{
				$pdf->writeHTMLCell(70, 4, $this->marge_gauche+10, $nexY,
				$outputlangs->transnoentities("Area").' : ', $border=1, $ln=1, $fill=0, $reseth=true, $align='L', $autopadding=false);
				$pdf->writeHTMLCell($this->page_largeur-$this->marge_droite-10-$this->marge_gauche-10-70, 4, $this->marge_gauche+10+70, $nexY, dol_htmlentitiesbr($object->surface) .' ' .measuring_units_string($object->surface_units, $measuring_style='surface'), $border=1, $ln=1, $fill=0, $reseth=true, $align='L', $autopadding=false);
				$nexY = $pdf->GetY();
			}

			// Affiche le volume si défini
			if ($object->volume)
			{
				$pdf->writeHTMLCell(70, 4, $this->marge_gauche+10, $nexY,
				$outputlangs->transnoentities("Volume").' : ', $border=1, $ln=1, $fill=0, $reseth=true, $align='L', $autopadding=false);
				$pdf->writeHTMLCell($this->page_largeur-$this->marge_droite-10-$this->marge_gauche-10-70, 4, $this->marge_gauche+10+70, $nexY, dol_htmlentitiesbr($object->volume) .' ' .measuring_units_string($object->volume_units, $measuring_style='volume'), $border=1, $ln=1, $fill=0, $reseth=true, $align='L', $autopadding=false);
				$nexY = $pdf->GetY();
			}
		}
	}

 	/**
	 *  Show public note
	 *
	 *  @param	TCPDF		$pdf     		Object PDF
	 *  @param  Object		$object     	Object to show
	 *  @param  Translate	$outputlangs	Object lang for output
	 *  @param	int			$nexY			Position Y to start
	 *  @return	void
	 */

	function _note(&$pdf, $object, $outputlangs, $nexY)
	{
	    global $default_font_size, $langs;

		// Affichage des notes public
		// There is no public note on product yet (Juste on GUI --> string on product table DB already exists)
		if ($object->note_public)
		{
			$pdf->SetFont('', 'B', $default_font_size);
			$pdf->SetFillColor(225, 225, 225);
			$pdf->SetXY($this->marge_gauche,$nexY+1);
			$pdf->RoundedRect($this->marge_gauche, $nexY-3, $this->page_largeur-$this->marge_gauche-$this->marge_droite, 6, 2, '1234', 'DF');
			$pdf->MultiCell($this->page_largeur-$this->marge_gauche-$this->marge_droite, 5, $outputlangs->transnoentities("Note"), 0, 'C', false);
			$pdf->SetFont('', '', $default_font_size);
			$nexY = $pdf->GetY()+5;  // espace de 5mm
			
			$pdf->SetFont('','', $default_font_size - 1);
			$pdf->writeHTMLCell($this->page_largeur-$this->marge_gauche-10-$this->marge_droite-10, 4, $this->marge_gauche+2, $nexY, dol_htmlentitiesbr($object->note_public), 0, 1);
		}
	}


	/**
	 *  Show top header of page.
	 *
	 *  @param	TCPDF		$pdf     		Object PDF
	 *  @param  Object		$object     	Object to show	 *  @param  Translate	$outputlangs	Object lang for output
	 *  @param	string		$titlekey		Translation key to show as title of document
	 *  @return	void
	 */
	function _pagehead(&$pdf, $object, $outputlangs, $titlekey="")
	{
	    global $conf,$langs,$hookmanager;

	    // Load traductions files requiredby by page
		$outputlangs->loadLangs(array("main", "propal", "companies", "bills", "orders"));

	    $default_font_size = pdf_getPDFFontSize($outputlangs);

	    if ($object->type == 1) $titlekey='ServiceSheet';
	    else $titlekey='ProductSheet';

	    pdf_pagehead($pdf,$outputlangs,$this->page_hauteur);

	    /*
	    // Show Draft Watermark
	    if($object->statut==0 && (! empty($conf->global->COMMANDE_DRAFT_WATERMARK)) )
	    {
	        pdf_watermark($pdf,$outputlangs,$this->page_hauteur,$this->page_largeur,'mm',$conf->global->COMMANDE_DRAFT_WATERMARK);
	    }
		*/
	    $pdf->SetTextColor(0,0,60);
	    $pdf->SetFont('','B', $default_font_size + 3);

	    $posy=$this->marge_haute-$this->marge_haute+10;
	    $posx=$this->page_largeur-$this->marge_droite-100;
	    $pdf->SetXY($this->marge_gauche,$posy);

	    // Logo
	    $logo=$conf->mycompany->dir_output.'/logos/'.$this->emetteur->logo;
	    if ($this->emetteur->logo)
	    {
	        if (is_readable($logo))
	        {
	            $height=pdf_getHeightForLogo($logo);
	            $pdf->Image($logo, $this->marge_gauche, $posy, 0, $height);	// width=0 (auto)
	        }
	        else
	        {
	            $pdf->SetTextColor(200,0,0);
	            $pdf->SetFont('','B', $default_font_size -2);
	            $pdf->MultiCell(100, 3, $outputlangs->transnoentities("ErrorLogoFileNotFound",$logo), 0, 'L');
	            $pdf->MultiCell(100, 3, $outputlangs->transnoentities("ErrorGoToGlobalSetup"), 0, 'L');
	        }
	    }
	    else
	    {
	        $text=$this->emetteur->name;
	        $pdf->MultiCell(100, 4, $outputlangs->convToOutputCharset($text), 0, 'L');
	    }

	    $pdf->SetFont('','B', $default_font_size + 4);
	    $pdf->SetXY($posx,$posy);
	    $pdf->SetTextColor(0,0,60);
	    $title=$outputlangs->transnoentities($titlekey);
	    $pdf->MultiCell(100, 4, $title, '', 'R');

	    $pdf->SetFont('','B',$default_font_size);

	    $posy+=7;
	    $pdf->SetXY($posx,$posy);
	    $pdf->SetTextColor(0,0,60);
	    $pdf->MultiCell(100, 4, $outputlangs->transnoentities("Ref")." : " . $outputlangs->convToOutputCharset($object->ref), '', 'R');

	    // Show list of linked objects
	    $posy+=7;
	    $pdf->SetFont('','', $default_font_size - 1);
	    $posy = pdf_writeLinkedObjects($pdf, $object, $outputlangs, $posx, $posy, 100, 3, 'R', $default_font_size);
	    $pdf->SetTextColor(0,0,0);
	}



/**
	 *   	Show footer of page. Need this->emetteur object
     *
	 *   	@param	PDF			$pdf     			PDF
	 * 		@param	CommandeFournisseur		$object				Object to show
	 *      @param	Translate	$outputlangs		Object lang for output
	 *      @param	int			$hidefreetext		1=Hide free text
	 *      @return	int								Return height of bottom margin including footer text
	 */
	function _pagefoot(&$pdf, $object, $outputlangs, $hidefreetext=0)
	{
		global $conf;
		$showdetails=$conf->global->MAIN_GENERATE_DOCUMENTS_SHOW_FOOT_DETAILS;
		return pdf_pagefoot($pdf,$outputlangs,'PRODUCT_FREE_TEXT',$this->emetteur,$this->marge_basse+10,$this->marge_gauche-10,$this->page_hauteur-10,$object,$showdetails,$hidefreetext);
	}

}

